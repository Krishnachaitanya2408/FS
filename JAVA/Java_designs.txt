You are developing a Credit Risk Assessment System for a financial institution. 
The system evaluates customer creditworthiness based on income, debt, and missed 
payments. Your task is to design and implement the program using Object-Oriented 
Programming (OOP) principles in Java.

The system should:
------------------
 - Accept multiple customer profiles.
 - Calculate a credit score for each customer using a weighted formula.
 - Classify each customer as Low Risk, Medium Risk, or High Risk.
 - Output a summary report for each customer.

Specifications:
---------------
 - Scoring Formula (Fixed weights):
 - Income Score = min(1, income / 100000)
 - Debt Score = 1 - min(1, debt / 50000)
 - Missed Payments Score = 1 - min(1, missedPayments / 10)
 - Final Score = (0.4 × Income Score) + (0.4 × Debt Score) + (0.2 × Missed Payment Score) × 100

Risk Level Classification:
--------------------------
 - Score ≥ 80 → Low Risk
 - 50 ≤ Score < 80 → Medium Risk
 - Score < 50 → High Risk

Tasks to Complete
-----------------
- Create a POJO class Customer
    - Fields: name, income, debt, missedPayments
    - Include constructors, getters, and setters.

- Create a POJO class CreditReport
    - Fields: Customer object, calculatedScore, riskLevel
    - Include constructors and toString() method.

 - Define an interface RiskAnalyzer
    - Method: CreditReport analyzeRisk(Customer customer);

 - Implement a class CreditRiskAnalyzerImpl that implements the interface.
    - Calculate the score using the provided formula.
    - Determine the risk level.
    - Return a CreditReport object.

- Write the Main class to:
    - Create at least 3 sample Customer objects.
    - Use the CreditRiskAnalyzerImpl to generate reports.
    - Print the final report for each customer.


Sample Input:
-------------
3
David
100000
0
0
Eva
10000
10000
10
Frank
80000
10000
2

Sample Output:
--------------
Customer: David, Score: 100.0, Risk Level: Low                                                                                                        
Customer: Eva, Score: 36.0, Risk Level: High                                                                                                          
Customer: Frank, Score: 80.0, Risk Level: Low 


import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Customer 



{




    private String name;
    private double income;
    private double debt;
    private int missedPayments;

    public Customer(String name, double income, double debt, int missedPayments) 

{




        this.name = name;
        this.income = income;
        this.debt = debt;
        this.missedPayments = missedPayments;
    

}

    // Getters
    public String getName() 

{




        return name;
    

}

    public double getIncome() 

{




        return income;
    

}

    public double getDebt() 

{




        return debt;
    

}

    public int getMissedPayments() 

{




        return missedPayments;
    

}

    // Setters
    public void setName(String name) 

{




        this.name = name;
    

}

    public void setIncome(double income) 

{




        this.income = income;
    

}

    public void setDebt(double debt) 

{




        this.debt = debt;
    

}

    public void setMissedPayments(int missedPayments) 

{




        this.missedPayments = missedPayments;
    

}

}

// POJO class: CreditReport
class CreditReport 

{




    private Customer customer;
    private double score;
    private String riskLevel;

    // Constructor
    public CreditReport(Customer customer, double score, String riskLevel) 

{




        this.customer = customer;
        this.score = score;
        this.riskLevel = riskLevel;
    

}

    // toString for output
    @Override
    public String toString() 

{




        return String.format("Customer: %s, Score: %.1f, Risk Level: %s",
                customer.getName(), score, riskLevel);
    

}

}

// Interface: RiskAnalyzer
interface RiskAnalyzer 

{




    CreditReport analyzeRisk(Customer customer);

}

// Implementation: CreditRiskAnalyzerImpl
class CreditRiskAnalyzerImpl implements RiskAnalyzer 

{





    @Override
    public CreditReport analyzeRisk(Customer customer) 

{




        // Scoring formula:
        double incomeScore = Math.min(1.0, customer.getIncome() / 100000.0);
        double debtScore = 1.0 - Math.min(1.0, customer.getDebt() / 50000.0);
        double missedPaymentsScore = 1.0 - Math.min(1.0, customer.getMissedPayments() / 10.0);

        double finalScore = ((0.4 * incomeScore) + (0.4 * debtScore) + (0.2 * missedPaymentsScore)) * 100;

        // Risk Level
        String riskLevel;
        if (finalScore >= 80.0) 

{




            riskLevel = "Low";
        

} else if (finalScore >= 50.0) 

{




            riskLevel = "Medium";
        

} else 

{




            riskLevel = "High";
        

}

        return new CreditReport(customer, finalScore, riskLevel);
    

}

}

// Main class
public class Main 

{




    public static void main(String[] args) 

{




        Scanner sc = new Scanner(System.in);
        int n = Integer.parseInt(sc.nextLine());

        List<Customer> customers = new ArrayList<>();
        for (int i = 0; i < n; i++) 

{




            String name = sc.nextLine();
            double income = Double.parseDouble(sc.nextLine());
            double debt = Double.parseDouble(sc.nextLine());
            int missedPayments = Integer.parseInt(sc.nextLine());

            customers.add(new Customer(name, income, debt, missedPayments));
        

}

        RiskAnalyzer analyzer = new CreditRiskAnalyzerImpl();

        for (Customer customer : customers) 

{




            CreditReport report = analyzer.analyzeRisk(customer);
            System.out.println(report);
        

}
    

}

}

-----------------------------------------------------------------------------


You're building a Movie Review Analyzer for a streaming platform. 
Your application will:
 - Read a list of N movies and their viewer ratings and reviews.
 - Compute a popularity score based on ratings and review lengths.
 - Classify movies as Blockbuster, Hit, or Flop.
 - Output a summary report for each movie.

Popularity Score Formula
------------------------
    - ratingScore = rating / 5.0
    - reviewScore = min(1.0, reviewLength / 200.0)
    - Final Score = (0.6 * ratingScore + 0.4 * reviewScore) * 100

Movie Classification
--------------------

    | Score-Range| Classification|
    ------------------------------
    |  ≥ 80	     | Blockbuster   |
    |  50–79	 | Hit           |
    |  < 50	     | Flop          | 


Tasks to Implement:
-------------------
- Create a POJO class Movie
    - Fields: title, rating, review
    - Constructor, getters, setters

- Create a POJO class MovieReport
    - Fields: Movie, score, category
    - toString() to return formatted output

- Define an interface MovieAnalyzer
    - Method: MovieReport analyze(Movie movie);

- Implement the interface in MovieAnalyzerImpl
    - Compute the score
    - Classify into category
    - Return a MovieReport

- Update Main class to:
    - Read N movies and their data from standard input
    - Print formatted analysis for each

Sample Input:
-------------
3
Inception
4.8
Mind-bending thriller with amazing visuals and story.
The Room
1.5
Terrible acting and editing. Poor direction.
Interstellar
4.5
Science fiction masterpiece. Great concept and emotional depth.

Sample Output
-------------
Movie: Inception, Score: 68.2, Category: Hit
Movie: The Room, Score: 26.8, Category: Flop
Movie: Interstellar, Score: 66.6, Category: Hit



import java.util.*;

public class Main 



{




    public static void main(String[] args) 

{




        Scanner sc = new Scanner(System.in);
        int n = Integer.parseInt(sc.nextLine());

        List<Movie> movies = new ArrayList<>();
        for (int i = 0; i < n; i++) 

{




            String title = sc.nextLine();
            double rating = Double.parseDouble(sc.nextLine());
            String review = sc.nextLine();

            movies.add(new Movie(title, rating, review));
        

}

        MovieAnalyzer analyzer = new MovieAnalyzerImpl();

        for (Movie m : movies) 

{




            MovieReport report = analyzer.analyze(m);
            System.out.println(report);
        

}
    

}

}

// POJO class for Movie
class Movie 

{




    private String title;
    private double rating;
    private String review;

    // Constructor (uses setters)
    public Movie(String title, double rating, String review) 

{




        setTitle(title);
        setRating(rating);
        setReview(review);
    

}

    // Setters
    public void setTitle(String title) 

{




        this.title = title;
    

}

    public void setRating(double rating) 

{




        this.rating = rating;
    

}

    public void setReview(String review) 

{




        this.review = review;
    

}

    // Getters
    public String getTitle() 

{




        return title;
    

}

    public double getRating() 

{




        return rating;
    

}

    public String getReview() 

{




        return review;
    

}

}

// POJO class for MovieReport
class MovieReport 

{




    private Movie movie;
    private double score;
    private String category;

    // Constructor
    public MovieReport(Movie movie, double score, String category) 

{




        this.movie = movie;
        this.score = score;
        this.category = category;
    

}

    // toString method for formatted output
    @Override
    public String toString() 

{




        return String.format("Movie: %s, Score: %.1f, Category: %s",
                movie.getTitle(), score, category);
    

}

}

// Interface for MovieAnalyzer
interface MovieAnalyzer 

{




    MovieReport analyze(Movie movie);

}

// Implementation of MovieAnalyzer
class MovieAnalyzerImpl implements MovieAnalyzer 

{




    @Override
    public MovieReport analyze(Movie movie) 

{




        double ratingScore = movie.getRating() / 5.0;
        int reviewLength = movie.getReview().length();
        double reviewScore = Math.min(1.0, reviewLength / 200.0);

        double finalScore = (0.6 * ratingScore + 0.4 * reviewScore) * 100;

        String category;
        if (finalScore >= 80.0) 

{




            category = "Blockbuster";
        

} else if (finalScore >= 50.0) 

{




            category = "Hit";
        

} else 

{




            category = "Flop";
        

}

        return new MovieReport(movie, finalScore, category);
    

}

}
